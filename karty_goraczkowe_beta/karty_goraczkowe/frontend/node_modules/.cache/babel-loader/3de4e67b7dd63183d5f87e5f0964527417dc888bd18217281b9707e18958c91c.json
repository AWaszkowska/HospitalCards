{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\48668\\\\Desktop\\\\HospitalCards\\\\karty_goraczkowe_beta\\\\karty_goraczkowe\\\\frontend\\\\src\\\\AddStudy.js\",\n  _s = $RefreshSig$();\nimport React, { Component } from \"react\";\nimport { Button, Container, Form } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddStudy() {\n  _s();\n  // declaring states needed to store the input values and message (success/fail)\n  const [pesel, setPesel] = useState(\"\");\n  const [measurement, setMeasurement] = useState(\"\");\n  const [measurement_date, setMeasurement_date] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  // when the form is submitted it calls a func handleSubmit\n  // it is where the data is posted to rest api\n  // he let declaration declares a block-scoped local variable, optionally initializing it to a value.\n  // we need to stringify data\n  // async and await keywords enable asynchronous, promise-based behavior\n  // e is the short var reference for event object which will be passed to event handlers\n  let handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      let res = await fetch('http://127.0.0.1:8000/api/bodytemperature/', {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          pesel: pesel,\n          measurement: measurement,\n          measurement_date: measurement_date\n        })\n      });\n      let resJson = await res.json();\n      if (res.status === 200) {\n        setPesel(\"\");\n        setMeasurement(\"\");\n        setMeasurement_date(\"\");\n        setMessage(\"User created successfully\");\n      } else {\n        setMessage(\"Some error occured\");\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Study\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Pesel:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: pesel,\n        placeholder: \"Pesel\",\n        onChange: e => setPesel(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Measurement:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        value: measurement,\n        placeholder: \"Measurement\",\n        onChange: e => setMeasurement(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Measurement Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: measurement_date,\n        placeholder: \"Measurement Date\",\n        onChange: e => setMeasurement_date(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        id: \"addpatient\",\n        children: \"Add Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(AddStudy, \"F9WokdMM+bPRODqESxdy6J8M6Ns=\");\n_c = AddStudy;\nexport default AddStudy;\nvar _c;\n$RefreshReg$(_c, \"AddStudy\");","map":{"version":3,"names":["React","Component","Button","Container","Form","useState","AddStudy","pesel","setPesel","measurement","setMeasurement","measurement_date","setMeasurement_date","message","setMessage","handleSubmit","e","preventDefault","res","fetch","method","headers","body","JSON","stringify","resJson","json","status","err","console","log","target","value"],"sources":["C:/Users/48668/Desktop/HospitalCards/karty_goraczkowe_beta/karty_goraczkowe/frontend/src/AddStudy.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport {Button, Container, Form} from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { useState } from \"react\";\r\n\r\nfunction AddStudy() {\r\n    // declaring states needed to store the input values and message (success/fail)\r\n    const [pesel, setPesel] = useState(\"\");\r\n    const [measurement, setMeasurement] = useState(\"\");\r\n    const [measurement_date, setMeasurement_date] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    // when the form is submitted it calls a func handleSubmit\r\n    // it is where the data is posted to rest api\r\n    // he let declaration declares a block-scoped local variable, optionally initializing it to a value.\r\n    // we need to stringify data\r\n    // async and await keywords enable asynchronous, promise-based behavior\r\n    // e is the short var reference for event object which will be passed to event handlers\r\n    let handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            let res = await fetch('http://127.0.0.1:8000/api/bodytemperature/',{\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              },\r\n            body: JSON.stringify({\r\n                pesel: pesel,\r\n                measurement: measurement,\r\n                measurement_date: measurement_date,\r\n            }),\r\n        });\r\n        let resJson = await res.json();\r\n        if (res.status === 200) {\r\n            setPesel(\"\");\r\n            setMeasurement(\"\");\r\n            setMeasurement_date(\"\");\r\n            setMessage(\"User created successfully\");\r\n        } else {\r\n            setMessage(\"Some error occured\");\r\n          }\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    };\r\n    \r\n    \r\n\r\n    return(\r\n        <div className=\"App\">\r\n        <h1>Add Study</h1>\r\n        <form onSubmit={handleSubmit}>\r\n            <label>Pesel:</label>\r\n            <input\r\n            type=\"text\"\r\n            value={pesel}\r\n            placeholder=\"Pesel\"\r\n            onChange={(e) => setPesel(e.target.value)}\r\n            />\r\n            <label>Measurement:</label>\r\n            <input\r\n            type=\"number\"\r\n            step=\"0.01\"\r\n            value={measurement}\r\n            placeholder=\"Measurement\"\r\n            onChange={(e) => setMeasurement(e.target.value)}\r\n            />\r\n            <label>Measurement Date:</label>\r\n            <input\r\n            type=\"date\"\r\n            value={measurement_date}\r\n            placeholder=\"Measurement Date\"\r\n            onChange={(e) => setMeasurement_date(e.target.value)}\r\n            />\r\n\r\n            <button type=\"submit\" id=\"addpatient\" >Add Study</button>\r\n\r\n            {/* <div className=\"message\">{message ? <p>{message}</p> : null}</div> */}\r\n        </form>\r\n        </div>\r\n    );\r\n        \r\n}\r\n\r\nexport default AddStudy;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}